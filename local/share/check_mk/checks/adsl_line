#!/usr/bin/python

# Description: Check-MK plugin for monitoring adsl lines
# File: adsl_line
# Version: 1.0
# Author: Ulrich Baumann <check_mk@uli-baumann.de>
#
# https://www.draytek.com/support/knowledge-base/5517
# supported ADSL-LINE-MIB OIDs in Draytek Vigor Routers
# (ADSL and VDSL are using same OIDs)
# 1.3.6.1.2.1.10.94.1.1.1.1.1 adslLineCoding
# 1.3.6.1.2.1.10.94.1.1.1.1.2 adslLineType
# 1.3.6.1.2.1.10.94.1.1.1.1.3 adslLineSpecific
# 1.3.6.1.2.1.10.94.1.1.1.1.4 adslLineConfProfile
# 1.3.6.1.2.1.10.94.1.1.1.1.5 adslLineAlarmConfProfile
# 1.3.6.1.2.1.10.94.1.1.3.1.1 adslAturInvSerialNumber
# 1.3.6.1.2.1.10.94.1.1.3.1.2 adslAturInvVendorID
# 1.3.6.1.2.1.10.94.1.1.3.1.3 adslAturInvVersionNumber
# 1.3.6.1.2.1.10.94.1.1.3.1.4 adslAturCurrSnrMgn
# 1.3.6.1.2.1.10.94.1.1.3.1.5 adslAturCurrAtn
# 1.3.6.1.2.1.10.94.1.1.3.1.6 adslAturCurrStatus
# 1.3.6.1.2.1.10.94.1.1.3.1.7 adslAturCurrOutputPwr
# 1.3.6.1.2.1.10.94.1.1.3.1.8 adslAturCurrAttainableRate
# 1.3.6.1.2.1.10.94.1.1.4.1.2 adslAtucChanCurrTxRate (DSL router's Rx Rate)
# 1.3.6.1.2.1.10.94.1.1.5.1.1 adslAturChanInterleaveDelay
# 1.3.6.1.2.1.10.94.1.1.5.1.2 adslAturChanCurrTxRate (DSL router's Tx rate)
# 1.3.6.1.2.1.10.94.1.1.5.1.3 adslAturChanPrevTxRate
# 1.3.6.1.2.1.10.94.1.1.5.1.4 adslAturChanCrcBlockLength

def inventory_adsl_line(info):
    for oid_end,adslLineCoding, adslLineType, adslLineSpecific, \
        adslAturInvSerialNumber, adslAturInvVendorID, adslAturInvVersionNumber, \
        adslAturCurrSnrMgn, adslAturCurrAtn, adslAturCurrStatus, adslAturCurrOutputPwr, \
        adslAturCurrAttainableRate, adslAtucChanCurrTxRate, adslAturChanCurrTxRate \
    in info:
        yield oid_end, None # item name follows oid enumeration

def check_adsl_line(item, params, info):
    # try to extract check parameters
    if 'downstream_params' in params:
        downstream_warn,downstream_crit = params['downstream_params']
    else:
        downstream_warn,downstream_crit = 0,0
    # constants from ADSL-LINE-MIB
    adslLineCodings = { 1: "other", 2: "dmt", 3: "cap", 4: "qam" }
    adslLineTypes =   { 1: "noChannel", 2: "fastOnly", 3: "interleavedOnly", \
                        4: "fastOrInterleaved", 5: "fastAndInterleaved" }
    # iterate ADSL Lines
    for oid_end,adslLineCoding, adslLineType, adslLineSpecific, \
        adslAturInvSerialNumber, adslAturInvVendorID, adslAturInvVersionNumber, \
        adslAturCurrSnrMgn, adslAturCurrAtn, adslAturCurrStatus, adslAturCurrOutputPwr, \
        adslAturCurrAttainableRate, adslAtucChanCurrTxRate, adslAturChanCurrTxRate \
    in info:
        if (item != oid_end): continue
        status = 0
        statusString = ''
        perfData = []
        # check link status
#        print upstream_warn,upstream_crit,upstream_warn,upstream_crit
        adslAturCurrStatus=cleanup_if_strings(adslAturCurrStatus)
        statusString += adslAturCurrStatus
        if adslAturCurrStatus != "SHOWTIME":
            status = max(status, 2)
        # check upstream
        statusString += ', Up: '+get_nic_speed_human_readable(adslAturChanCurrTxRate)
        if 'upstream_params' in params:
            upstream_warn,upstream_crit = params['upstream_params']
            upstream_warn=upstream_warn*10**6
            upstream_crit=upstream_crit*10**6
            if int(adslAturChanCurrTxRate) <= upstream_crit:
                status = max(status, 2)
                statusString += ' (CRIT at '+get_nic_speed_human_readable(upstream_crit)+')'
            elif int(adslAturChanCurrTxRate) <= upstream_warn:
                status = max(status, 1)
                statusString += ' (WARN at '+get_nic_speed_human_readable(upstream_warn)+')'
        else: upstream_warn,upstream_crit=None,None
        # check downstream
        statusString += ', Down: '+get_nic_speed_human_readable(adslAtucChanCurrTxRate)
        if 'downstream_params' in params:
            downstream_warn,downstream_crit = params['downstream_params']
            downstream_warn=downstream_warn*10**6
            downstream_crit=downstream_crit*10**6
            if int(adslAtucChanCurrTxRate) <= downstream_crit:
                status = max(status, 2)
                statusString += ' (CRIT at '+get_nic_speed_human_readable(downstream_crit)+')'
            elif int(adslAtucChanCurrTxRate) <= downstream_warn:
                status = max(status, 1)
                statusString += ' (WARN at '+get_nic_speed_human_readable(downstream_warn)+')'
        else: downstream_warn,downstream_crit=None,None
        statusString += ', Attainable: '+get_nic_speed_human_readable(adslAturCurrAttainableRate)
        # check snr_margin
        statusString += ', SNR Margin: ' + adslAturCurrSnrMgn+' dB'
        if 'snr_margin_params' in params:
            snr_margin_warn,snr_margin_crit = params['snr_margin_params']
            if int(adslAturCurrSnrMgn) <= snr_margin_crit:
                status = max(status, 2)
                statusString += ' (CRIT at '+str(snr_margin_crit)+'dB)'
            elif int(adslAturCurrSnrMgn) <= snr_margin_warn:
                status = max(status, 1)
                statusString += ' (WARN at '+str(snr_margin_warn)+'dB)'
        else: snr_margin_warn,snr_margin_crit=None,None
        # check attenuation
        statusString += ', Attenuation: ' + adslAturCurrAtn+' dB'
        if 'attenuation_params' in params:
            attenuation_warn,attenuation_crit = params['attenuation_params']
            if int(adslAturCurrAtn) >= attenuation_crit:
                status = max(status, 2)
                statusString += ' (CRIT at '+str(attenuation_crit)+'dB)'
            elif int(adslAturCurrAtn) >= attenuation_warn:
                status = max(status, 1)
                statusString += ' (WARN at '+str(attenuation_warn)+'dB)'
        else: attenuation_warn,attenuation_crit=None,None
        # additional info for status string
        statusString +=  ', '+\
        'Output Power: '+adslAturCurrOutputPwr+' db, '+\
        'Line Coding: '+adslLineCodings.get(int(adslLineCoding),"unknown")+', '+\
        'Line Type: '+adslLineTypes.get(int(adslLineType),"unknown") 
        perfData.append(("adsl_up_rate",adslAturChanCurrTxRate,upstream_warn,upstream_crit,0 ))
        perfData.append(("adsl_down_rate",adslAtucChanCurrTxRate,downstream_warn,downstream_crit,0))
        perfData.append(("adsl_attainable",adslAturCurrAttainableRate))
        perfData.append(("adsl_snr_margin",adslAturCurrSnrMgn,snr_margin_warn,snr_margin_crit,0))
        perfData.append(("adsl_attenuation",adslAturCurrAtn,attenuation_warn,attenuation_crit,0))
        perfData.append(("adsl_output_power",adslAturCurrOutputPwr))
        statusMap = { 0: 'OK', 1: 'WARN', 2: 'CRIT' }
        return status,statusMap.get(status)+' - '+statusString, perfData

def scan_adsl(oid):
    sys_descr = oid(".1.3.6.1.2.1.1.1.0").lower()
    for type_ in [ "vigor130", "vigor165", ]:  
      if type_ in sys_descr:
        return True
    return False

check_info["adsl_line"] = {
    "check_function"        : check_adsl_line,
    "group"                 : "adsl_line",
    "inventory_function"    : inventory_adsl_line,
    "service_description"   : "ADSL at Interface  %s",
    "snmp_info"             : ( ".1.3.6.1.2.1.10.94.1.1", [ \
       OID_END, # interface number
       "1.1.1", # adslLineCoding
       "1.1.2", # adslLineType
       "1.1.3", # adslLineSpecific
       "3.1.1", # adslAturInvSerialNumber
       "3.1.2", # adslAturInvVendorID
       "3.1.3", # adslAturInvVersionNumber
       "3.1.4", # adslAturCurrSnrMgn
       "3.1.5", # adslAturCurrAtn
       "3.1.6", # adslAturCurrStatus
       "3.1.7", # adslAturCurrOutputPwr
       "3.1.8", # adslAturCurrAttainableRate
       "4.1.2", # adslAtucChanCurrTxRate
       "5.1.2", # adslAtucChanCurrTxRate
       ] ),
   "snmp_scan_function"     : scan_adsl,
   "includes"               : ["if.include"],
   "has_perfdata"           : True
}


